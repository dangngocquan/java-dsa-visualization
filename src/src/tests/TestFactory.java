package src.tests;

public class TestFactory {
    public void testAll() {
        new TestList().run();
        new TestStack().run();
        new TestQueue().run();
        new TestPriorityQueue().run();
        new TestTree().run();
    }
/*

TEST ARRAY LIST
	Method executed            Return           List after execute method
	--------------------------------------------------------------------------------------------------------
	isEmpty()                  true             []
	size()                     0                []
	add(value=1)               true             [1]
	add(value=2)               true             [1, 2]
	add(index=0,value=3)                        [3, 1, 2]
	add(index=3,value=4)                        [3, 1, 2, 4]
	add(index=1,value=5)                        [3, 5, 1, 2, 4]
	add(index=4,value=6)                        [3, 5, 1, 2, 6, 4]
	isEmpty()                  false            [3, 5, 1, 2, 6, 4]
	size()                     6                [3, 5, 1, 2, 6, 4]
	get(index=0)               3                [3, 5, 1, 2, 6, 4]
	get(index=5)               4                [3, 5, 1, 2, 6, 4]
	get(index=3)               2                [3, 5, 1, 2, 6, 4]
	set(index=0,value=7)       3                [7, 5, 1, 2, 6, 4]
	set(index=5,value=8)       4                [7, 5, 1, 2, 6, 8]
	set(index=2,value=9)       1                [7, 5, 9, 2, 6, 8]
	remove(index=0)            7                [5, 9, 2, 6, 8]
	remove(index=4)            8                [5, 9, 2, 6]
	remove(index=1)            9                [5, 2, 6]
	remove(value=4)            false            [5, 2, 6]
	remove(value=5)            true             [2, 6]
	remove(value=2)            true             [6]
	remove(value=6)            true             []
	add(value=10)              true             [10]
	remove(value=10)           true             []
	add(index=0,value=11)                       [11]
	remove(index=0)            11               []

TEST SINGLY LINKED LIST
	Method executed            Return           List after execute method
	--------------------------------------------------------------------------------------------------------
	isEmpty()                  true             []
	size()                     0                []
	add(value=1)               true             [1]
	add(value=2)               true             [1, 2]
	add(index=0,value=3)                        [3, 1, 2]
	add(index=3,value=4)                        [3, 1, 2, 4]
	add(index=1,value=5)                        [3, 5, 1, 2, 4]
	add(index=4,value=6)                        [3, 5, 1, 2, 6, 4]
	isEmpty()                  false            [3, 5, 1, 2, 6, 4]
	size()                     6                [3, 5, 1, 2, 6, 4]
	get(index=0)               3                [3, 5, 1, 2, 6, 4]
	get(index=5)               4                [3, 5, 1, 2, 6, 4]
	get(index=3)               2                [3, 5, 1, 2, 6, 4]
	set(index=0,value=7)       3                [7, 5, 1, 2, 6, 4]
	set(index=5,value=8)       4                [7, 5, 1, 2, 6, 8]
	set(index=2,value=9)       1                [7, 5, 9, 2, 6, 8]
	remove(index=0)            7                [5, 9, 2, 6, 8]
	remove(index=4)            8                [5, 9, 2, 6]
	remove(index=1)            9                [5, 2, 6]
	remove(value=4)            false            [5, 2, 6]
	remove(value=5)            true             [2, 6]
	remove(value=2)            true             [6]
	remove(value=6)            true             []
	add(value=10)              true             [10]
	remove(value=10)           true             []
	add(index=0,value=11)                       [11]
	remove(index=0)            11               []

TEST DOUBLE LINKED LIST
	Method executed            Return           List after execute method
	--------------------------------------------------------------------------------------------------------
	isEmpty()                  true             []
	size()                     0                []
	add(value=1)               true             [1]
	add(value=2)               true             [1, 2]
	add(index=0,value=3)                        [3, 1, 2]
	add(index=3,value=4)                        [3, 1, 2, 4]
	add(index=1,value=5)                        [3, 5, 1, 2, 4]
	add(index=4,value=6)                        [3, 5, 1, 2, 6, 4]
	isEmpty()                  false            [3, 5, 1, 2, 6, 4]
	size()                     6                [3, 5, 1, 2, 6, 4]
	get(index=0)               3                [3, 5, 1, 2, 6, 4]
	get(index=5)               4                [3, 5, 1, 2, 6, 4]
	get(index=3)               2                [3, 5, 1, 2, 6, 4]
	set(index=0,value=7)       3                [7, 5, 1, 2, 6, 4]
	set(index=5,value=8)       4                [7, 5, 1, 2, 6, 8]
	set(index=2,value=9)       1                [7, 5, 9, 2, 6, 8]
	remove(index=0)            7                [5, 9, 2, 6, 8]
	remove(index=4)            8                [5, 9, 2, 6]
	remove(index=1)            9                [5, 2, 6]
	remove(value=4)            false            [5, 2, 6]
	remove(value=5)            true             [2, 6]
	remove(value=2)            true             [6]
	remove(value=6)            true             []
	add(value=10)              true             [10]
	remove(value=10)           true             []
	add(index=0,value=11)                       [11]
	remove(index=0)            11               []

TEST ARRAY STACK
	Action               Return          Stack
	---------------------------------------------------------
	stack.isEmpty()      true            []
	stack.size()         0               []
	stack.push(1)                        [1]
	stack.push(2)                        [1, 2]
	stack.pop()          2               [1]
	stack.isEmpty()      false           [1]
	stack.top()          1               [1]
	stack.push(3)                        [1, 3]
	stack.top()          3               [1, 3]
	stack.push(4)                        [1, 3, 4]
	stack.pop()          4               [1, 3]

TEST LINKED LIST STACK
	Action               Return          Stack
	---------------------------------------------------------
	stack.isEmpty()      true            []
	stack.size()         0               []
	stack.push(1)                        [1]
	stack.push(2)                        [1, 2]
	stack.pop()          2               [1]
	stack.isEmpty()      false           [1]
	stack.top()          1               [1]
	stack.push(3)                        [1, 3]
	stack.top()          3               [1, 3]
	stack.push(4)                        [1, 3, 4]
	stack.pop()          4               [1, 3]

TEST ARRAY QUEUE
	Action               Return          Queue
	------------------------------------------------------------------------
	size()               0               []
	isEmpty()            true            []
	enqueue(1)                           [1]
	enqueue(2)                           [1, 2]
	enqueue(3)                           [1, 2, 3]
	size()               3               [1, 2, 3]
	isEmpty()            false           [1, 2, 3]
	first()              1               [1, 2, 3]
	last()               3               [1, 2, 3]
	dequeue()            1               [2, 3]
	dequeue()            2               [3]
	last()               3               [3]
	first()              3               [3]
	dequeue()            3               []
	last()               null            []
	first()              null            []

TEST LINKED LIST QUEUE
	Action               Return          Queue
	------------------------------------------------------------------------
	size()               0               []
	isEmpty()            true            []
	enqueue(1)                           [1]
	enqueue(2)                           [1, 2]
	enqueue(3)                           [1, 2, 3]
	size()               3               [1, 2, 3]
	isEmpty()            false           [1, 2, 3]
	first()              1               [1, 2, 3]
	last()               3               [1, 2, 3]
	dequeue()            1               [2, 3]
	dequeue()            2               [3]
	last()               3               [3]
	first()              3               [3]
	dequeue()            3               []
	last()               null            []
	first()              null            []


TEST UNSORTED ARRAY PRIORITY QUEUE

TEST 1
Action                                    Return                          Priority queue after action
--------------------------------------------------------------------------------------------------------------------------------------
size()                                    0                               PriorityQueue[]
isEmpty()                                 true                            PriorityQueue[]
insert([10, 10])                                                          PriorityQueue[[10, 10]]
insert(key=4, value=4)                                                    PriorityQueue[[10, 10], [4, 4]]
insert(key=7, value=7)                                                    PriorityQueue[[10, 10], [4, 4], [7, 7]]
min()                                     [4, 4]                          PriorityQueue[[10, 10], [4, 4], [7, 7]]
removeMin()                               [4, 4]                          PriorityQueue[[10, 10], [7, 7]]
insert(key=1, value=1)                                                    PriorityQueue[[10, 10], [7, 7], [1, 1]]
insert(key=5, value=5)                                                    PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5]]
insert(key=3, value=3)                                                    PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
size()                                    5                               PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
isEmpty()                                 false                           PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
min()                                     [1, 1]                          PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
removeMin()                               [1, 1]                          PriorityQueue[[10, 10], [7, 7], [5, 5], [3, 3]]
removeMin()                               [3, 3]                          PriorityQueue[[10, 10], [7, 7], [5, 5]]
removeMin()                               [5, 5]                          PriorityQueue[[10, 10], [7, 7]]
removeMin()                               [7, 7]                          PriorityQueue[[10, 10]]


TEST SORTED ARRAY PRIORITY QUEUE

TEST 1
Action                                    Return                          Priority queue after action
--------------------------------------------------------------------------------------------------------------------------------------
size()                                    0                               PriorityQueue[]
isEmpty()                                 true                            PriorityQueue[]
insert([10, 10])                                                          PriorityQueue[[10, 10]]
insert(key=4, value=4)                                                    PriorityQueue[[4, 4], [10, 10]]
insert(key=7, value=7)                                                    PriorityQueue[[4, 4], [7, 7], [10, 10]]
min()                                     [4, 4]                          PriorityQueue[[4, 4], [7, 7], [10, 10]]
removeMin()                               [4, 4]                          PriorityQueue[[7, 7], [10, 10]]
insert(key=1, value=1)                                                    PriorityQueue[[1, 1], [7, 7], [10, 10]]
insert(key=5, value=5)                                                    PriorityQueue[[1, 1], [5, 5], [7, 7], [10, 10]]
insert(key=3, value=3)                                                    PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
size()                                    5                               PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
isEmpty()                                 false                           PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
min()                                     [1, 1]                          PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
removeMin()                               [1, 1]                          PriorityQueue[[3, 3], [5, 5], [7, 7], [10, 10]]
removeMin()                               [3, 3]                          PriorityQueue[[5, 5], [7, 7], [10, 10]]
removeMin()                               [5, 5]                          PriorityQueue[[7, 7], [10, 10]]
removeMin()                               [7, 7]                          PriorityQueue[[10, 10]]


TEST UNSORTED LINKED PRIORITY QUEUE

TEST 1
Action                                    Return                          Priority queue after action
--------------------------------------------------------------------------------------------------------------------------------------
size()                                    0                               PriorityQueue[]
isEmpty()                                 true                            PriorityQueue[]
insert([10, 10])                                                          PriorityQueue[[10, 10]]
insert(key=4, value=4)                                                    PriorityQueue[[10, 10], [4, 4]]
insert(key=7, value=7)                                                    PriorityQueue[[10, 10], [4, 4], [7, 7]]
min()                                     [4, 4]                          PriorityQueue[[10, 10], [4, 4], [7, 7]]
removeMin()                               [4, 4]                          PriorityQueue[[10, 10], [7, 7]]
insert(key=1, value=1)                                                    PriorityQueue[[10, 10], [7, 7], [1, 1]]
insert(key=5, value=5)                                                    PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5]]
insert(key=3, value=3)                                                    PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
size()                                    5                               PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
isEmpty()                                 false                           PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
min()                                     [1, 1]                          PriorityQueue[[10, 10], [7, 7], [1, 1], [5, 5], [3, 3]]
removeMin()                               [1, 1]                          PriorityQueue[[10, 10], [7, 7], [5, 5], [3, 3]]
removeMin()                               [3, 3]                          PriorityQueue[[10, 10], [7, 7], [5, 5]]
removeMin()                               [5, 5]                          PriorityQueue[[10, 10], [7, 7]]
removeMin()                               [7, 7]                          PriorityQueue[[10, 10]]


TEST SORTED LINKED PRIORITY QUEUE

TEST 1
Action                                    Return                          Priority queue after action
--------------------------------------------------------------------------------------------------------------------------------------
size()                                    0                               PriorityQueue[]
isEmpty()                                 true                            PriorityQueue[]
insert([10, 10])                                                          PriorityQueue[[10, 10]]
insert(key=4, value=4)                                                    PriorityQueue[[4, 4], [10, 10]]
insert(key=7, value=7)                                                    PriorityQueue[[4, 4], [7, 7], [10, 10]]
min()                                     [4, 4]                          PriorityQueue[[4, 4], [7, 7], [10, 10]]
removeMin()                               [4, 4]                          PriorityQueue[[7, 7], [10, 10]]
insert(key=1, value=1)                                                    PriorityQueue[[1, 1], [7, 7], [10, 10]]
insert(key=5, value=5)                                                    PriorityQueue[[1, 1], [5, 5], [7, 7], [10, 10]]
insert(key=3, value=3)                                                    PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
size()                                    5                               PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
isEmpty()                                 false                           PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
min()                                     [1, 1]                          PriorityQueue[[1, 1], [3, 3], [5, 5], [7, 7], [10, 10]]
removeMin()                               [1, 1]                          PriorityQueue[[3, 3], [5, 5], [7, 7], [10, 10]]
removeMin()                               [3, 3]                          PriorityQueue[[5, 5], [7, 7], [10, 10]]
removeMin()                               [5, 5]                          PriorityQueue[[7, 7], [10, 10]]
removeMin()                               [7, 7]                          PriorityQueue[[10, 10]]
TEST ARRAY BINARY TREE

Method                    Return          Binary Tree
------------------------------------------------------------------------------------------
root()                    1
------------------------------------------------------------------------------------------
size()                    0
------------------------------------------------------------------------------------------
isEmpty()                 true
------------------------------------------------------------------------------------------
numberChildren(1)         0
------------------------------------------------------------------------------------------
setRoot(A)                                A
------------------------------------------------------------------------------------------
setLeft(1, A0)                            A
                                              A0
------------------------------------------------------------------------------------------
setRight(1, A1)                               A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
element(1)                A                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
element(2)                A0                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
element(3)                A1                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
root()                    1                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
size()                    3                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
isEmpty()                 false               A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
numberChildren(1)         2                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
parent(2)                 1                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
parent(3)                 1                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
left(1)                   2                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
right(1)                  3                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
sibling(2)                3                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
sibling(3)                2                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
setLeft(2, A00)                                A1
                                          A
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
setLeft(3, A10)                                A1
                                                    A10
                                          A
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
setRight(2, A01)                               A1
                                                    A10
                                          A
                                                    A01
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
size()                    6                    A1
                                                    A10
                                          A
                                                    A01
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
setLeft(4, A000)                                A1
                                                      A10
                                          A
                                                      A01
                                                A0
                                                      A00
                                                            A000
------------------------------------------------------------------------------------------
size()                    7                     A1
                                                      A10
                                          A
                                                      A01
                                                A0
                                                      A00
                                                            A000
------------------------------------------------------------------------------------------
setLeft(1, null)                               A1
                                                    A10
                                          A
------------------------------------------------------------------------------------------
size()                    3                    A1
                                                    A10
                                          A
------------------------------------------------------------------------------------------
TEST LINKED BINARY TREE

Method                    Return          Binary Tree
------------------------------------------------------------------------------------------
root()                    null
------------------------------------------------------------------------------------------
size()                    0
------------------------------------------------------------------------------------------
isEmpty()                 true
------------------------------------------------------------------------------------------
numberChildren(null)      0
------------------------------------------------------------------------------------------
addRoot(A)                A               A
------------------------------------------------------------------------------------------
addLeft(A, A0)            A0              A
                                              A0
------------------------------------------------------------------------------------------
addRight(A, A1)           A1                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
element(A)                A                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
element(A0)               A0                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
element(A1)               A1                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
root()                    A                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
size()                    3                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
isEmpty()                 false               A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
numberChildren(A)         2                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
parent(A0)                A                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
parent(A1)                A                   A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
left(A)                   A0                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
right(A)                  A1                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
sibling(A0)               A1                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
sibling(A1)               A0                  A1
                                          A
                                              A0
------------------------------------------------------------------------------------------
addLeft(A0, A00)          A00                  A1
                                          A
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
addLeft(A1, A10)          A10                  A1
                                                    A10
                                          A
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
addRight(A0, A01)         A01                  A1
                                                    A10
                                          A
                                                    A01
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
size()                    6                    A1
                                                    A10
                                          A
                                                    A01
                                               A0
                                                    A00
------------------------------------------------------------------------------------------
addLeft(A00, A000)        A000                  A1
                                                      A10
                                          A
                                                      A01
                                                A0
                                                      A00
                                                            A000
------------------------------------------------------------------------------------------
size()                    7                     A1
                                                      A10
                                          A
                                                      A01
                                                A0
                                                      A00
                                                            A000
------------------------------------------------------------------------------------------
addLeft(A, null)          A0                    A1
                                                      A10
                                          A
                                                      A01
                                                A0
                                                      A00
                                                            A000
------------------------------------------------------------------------------------------
size()                    7                     A1
                                                      A10
                                          A
                                                      A01
                                                A0
                                                      A00
                                                            A000
------------------------------------------------------------------------------------------
TEST BINARY SEARCH TREE

Method                    Return          Binary Search Tree
------------------------------------------------------------------------------------------
insert(value=5)           true            5
------------------------------------------------------------------------------------------
insert(value=6)           true               6
                                          5
------------------------------------------------------------------------------------------
insert(value=4)           true               6
                                          5
                                             4
------------------------------------------------------------------------------------------
insert(value=3)           true               6
                                          5
                                             4
                                                3
------------------------------------------------------------------------------------------
findMin()                 3                  6
                                          5
                                             4
                                                3
------------------------------------------------------------------------------------------
search(value=5)           5                  6
                                          5
                                             4
                                                3
------------------------------------------------------------------------------------------
search(value=7)           null               6
                                          5
                                             4
                                                3
------------------------------------------------------------------------------------------
delete(value=6)           5               5
                                             4
                                                3
------------------------------------------------------------------------------------------
insert(value=1)           true            5
                                             4
                                                3
                                                   1
------------------------------------------------------------------------------------------
insert(value=2)           true            5
                                             4
                                                3
                                                      2
                                                   1
------------------------------------------------------------------------------------------
insert(value=7)           true               7
                                          5
                                             4
                                                3
                                                      2
                                                   1
------------------------------------------------------------------------------------------
insert(value=6)           true               7
                                                6
                                          5
                                             4
                                                3
                                                      2
                                                   1
------------------------------------------------------------------------------------------
delete(value=1)           5                  7
                                                6
                                          5
                                             4
                                                3
                                                   2
------------------------------------------------------------------------------------------
TEST AVL TREE

Method                    Return          AVL Tree
------------------------------------------------------------------------------------------
insert(value=10)          true            10
------------------------------------------------------------------------------------------
insert(value=5)           true            10
                                              5
------------------------------------------------------------------------------------------
insert(value=2)           true                10
                                          5
                                              2
------------------------------------------------------------------------------------------
insert(value=1)           true                10
                                          5
                                              2
                                                  1
------------------------------------------------------------------------------------------
insert(value=3)           true                10
                                          5
                                                  3
                                              2
                                                  1
------------------------------------------------------------------------------------------
insert(value=4)           true                    10
                                              5
                                                  4
                                          3
                                              2
                                                  1
------------------------------------------------------------------------------------------
insert(value=15)          true                        15
                                                  10
                                              5
                                                  4
                                          3
                                              2
                                                  1
------------------------------------------------------------------------------------------
insert(value=20)          true                        20
                                                  15
                                              10
                                          5
                                                  4
                                              3
                                                  2
                                                      1
------------------------------------------------------------------------------------------
insert(value=19)          true                    20
                                                      19
                                              15
                                                  10
                                          5
                                                  4
                                              3
                                                  2
                                                      1
------------------------------------------------------------------------------------------
insert(value=18)          true                    20
                                              19
                                                      18
                                                  15
                                                      10
                                          5
                                                  4
                                              3
                                                  2
                                                      1
------------------------------------------------------------------------------------------
insert(value=17)          true                        20
                                                  19
                                              18
                                                      17
                                                  15
                                                      10
                                          5
                                                  4
                                              3
                                                  2
                                                      1
------------------------------------------------------------------------------------------

*/
}
